# Stage 1: Build Stage
FROM node:20-alpine as builder

# Set the working directory inside the container
WORKDIR /usr/src/app

# Arguments can be passed during build time
ARG NODE_ENV=production
ARG DB_PORT=5432
ARG DB_HOST=db-prod

# Copy package.json and package-lock.json
COPY package.json package-lock.json ./

# Install app dependencies (only production dependencies will be installed)
RUN npm ci --only=production

# Copy the rest of the application code
COPY . .

# Copy Prisma schema
COPY prisma ./prisma

# Build the application
RUN npm run build

# Stage 2: Production Stage
FROM node:20-alpine

# Set the working directory inside the container
WORKDIR /usr/src/app

# Copy necessary files from the builder stage
COPY --from=builder /usr/src/app/node_modules ./node_modules
COPY --from=builder /usr/src/app/dist ./dist
COPY --from=builder /usr/src/app/prisma ./prisma
COPY --from=builder /usr/src/app/package.json ./

# Install OpenSSL for secure connections
RUN apk add --no-cache openssl

# Install dockerize for service health checks
ENV DOCKERIZE_VERSION v0.6.0
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz

# Utilizing a shell to dynamically check the DB hostname and port
# CMD ["sh", "-c", "dockerize -wait tcp://${DB_HOST}:${DB_PORT} -timeout 60m npm run start:dev && npm run prisma:generate-dev & npm run prisma:db-push-dev"]
CMD ["sh", "-c", "npm run prisma:generate-prod & npm run prisma:db-push-prod & dockerize -wait tcp://${DB_HOST}:${DB_PORT} -timeout 60m npm run start:prod"]